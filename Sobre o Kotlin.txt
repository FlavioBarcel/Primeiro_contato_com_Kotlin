Kotlin
----------------------

Estrutura da Linguagem

* Não utiliza ponto e vírgula;
* Não possui operador ternário tradicional;
 (possui um operador proprio relacionado a checagem se algo é nulo ou não)

site que contem o kotlin playground - https://play.kotlinlang.org/

Tipos de Dados
------------------------------
* Int	* Boolean
* Long	* Char
* Float	* Byte
* Double	* Short
* Array	* Null 

Exemplos
-------------------------------
println(Int.MAX_VALUE)
println(Float.MAX_VALUE)
println(Long.MAX_VALUE)
println(Byte.MAX_VALUE)
println(Short.MAX_VALUE)

Converter
-------------------------------
toByte( )
toShort( )
toInt( )
toLong( )
toFloat( )
toDouble( )
toChar( )

Declaração de variável
--------------------------------

*  Var ( valor mutável, CamelCase) - 
*  Val ( valor imutavel, CamelCase) - so vai ter o valor atribuido uma vez
*  Const Val ( valor imutável, Snake_Case) -  constante cujo valor é atribuido durante a compilação 
obs: dentro da função main se usa o Val e fora se usa o Const val

Ex.:1º exemplo  var currentAge = 22	       val currentAge = 22	              const val MIN_AGE = 16
          
       2º exemplo var currentAge:Int?	     val currentAge:Int?		             const val MAX_AGE = 68
            currentAge = null ou 22	     currentAge = null ou 22	
               (Exemplo de VAR)             (Exemplo de VAL)                  (Exemplo de Const val)
          valor definido e alterado      valor definido durante a             valor definido durante   
              durante a execução                execução                           a compilação


Possiveis erros
-------------------------------------
var tete			var tete=22 ou
tete = 22 // ERRO		var tete:Int

var tete = "ano"		var tete="ano"       
tete = 2021 //ERRO		tete=2021.toString()  CERTO

Nullability
-----------------------------------------

var tete:int? = null

var tete:Int = null //ERRO

Operadores Aritméticos
------------------------------------------

Função	  	          Expressão              comando             Atribuição
----------	   | 	-----------------  |   --------------	 |   ----------------
soma	         |	      a  + b	       |	     a.plus(b)	   |	     a += b
subtração     |       a  -  b	      |	     a.minus(b)   |	     a -= b
multiplicação |       a  *  b	      |	     a.times(b)	  |	     a *= b
divisão       |       a  /  b	      |	     a.div(b)	    |	     a /= b
resto         |       a  %  b	      |   	  a.mod(b)	    |  	   a %= b


Operadores Comparativos
-----------------------------------------

Função	  	               Expressão                          Comando    
----------	       |  -----------------  |   ------------------------------------------	       
maior/menor    	  |     a>b ou a<b	     |	   a.compareTo(b) >0 ou a.compareTo (b) <0	      
maior/menor igual |    a>=b ou a<=b	    |	   a.compareTo(b) >=0 ou a.compareTo (b) =<0      
igual  		         |       a == b	       |	   a.equals(b)	       
diferente         |       a != b	       |   	!(a.equals(b))	      

obs: Os comandos compareTo retornam os valores -1(menos que), 0(igual) ou 1(maior).Ja os operadores retornam valores booleano
         O comando equals retorna um boleano
         
Operadores in e ranger
------------------------------------------
in        - contem      - se o valor esta presente em uma lista ou uma faixa(ranger) de valores
!in       - nao contem  - se o valor não esta presente em uma lista ou uma faixa(ranger) de valores
int..int  - ranger      - cria um intervalo de valores que inicia no primeiro parametro e acaba no segundo
Exemplos:
var premiado=listOf(1,4,7,10)   - exemplo de list com o comando listOf
    var bingo=(1..10).random()  - exemplo de ranger com o comando .random() que sorteia um numero de 1 a 10
    println(bingo)
    
    if (bingo in premiado)      - exemplo de contem
         println("Voce foi sorteado")
    else println ("Voce nao foi sorteado")
    
Manipulação de Strings
-------------------------------------------
Métodos associados:
- indexação, concatenação, comparação, formação
- concatenada com plus ou +
- tambem é tratada como um array de char

a)Indexação                 Exemplo:   
- First()                   var s = "Olá, mundo1!"
- last()                    println(s[2])            resultado= á
- String.length             println(s.first())       resultado= á
- String[index]             println(s[s.length-1])   resultado= !
                            println(s.last())        resultado= !
b) Concatenação
- Para concatenar duas strings o plus/+ pode ser usado
- Para concatenar uma variável a uma string, os símbolos ${} devem ser inseridos
Exemplo:
var name = "Ana"
var s = "Olá"
println(s + name)               - OláAna
println("$s, $name!")           - Olá, Ana!
println("Bem vinda(o), $name!") - Bem vinda(o), Ana!

Outro Exemplo:
var welcome = "Bem vinda(o)"
var name = "luiza"
println("$welcome, ${name.capitalize()}!") - Bem vinda(o), Luiza!
Obs: $welcome             - sem as chaves so puxa a variavel
     ${name.capitalize()} - com a chaves eu posso chamar um metodo que deixa a letra maiusculo. Essa "capitalize" faz a letra ficar maiuscula 
     
c) Formatação
NOME                         | FUNÇÃO                                                          | MÉTODOS
Capitalização de strings     | Alterar a formatação entre letras minusculas e maiusculas       | capitalize(), toUpperCase(), toLowerCase(), and decapitalize()
remoção de espaços           | Remove espaços vazios e caracteres inadequados para impressão   | trimEnd(), trimStrant(),  trim()  
Subistituição de caracteres  | Subistituir caracteres por outros                               | replace(x,y)
Formatação                   | Formatar outros valores para o padrão de string                 | "padrão ${valor}".format(valor)

EMPTY X BLANK
------------------------------------------
- Métodos de comparação
- Empty se string esta vazia ou blank se a string esta em branco
- string vazia é cujo o tamanho é zero
- Se o tamanho da string(s.length) for 0 está empty e blank
- Se o tamanho for > 0 mas todos os caracteres sao espaços em branco está Blank mas não empty

Exemplo: String vazia

var nome = ""                                         - esta vazio e esta branco
println(nome.isEmpty())                               - true
println(nome.isBlank())                               - true
println(nome.isNullOrBlank() || nome.isNullOrblank()  - true

Exemplo: string em branco

var nome = "      "       - não esta vazio e ta branco
println(nome.isEmpty())   - false
println(nome.isBlank())   - true

FUNÇÕES
-----------------------------------------
- Prefixo Fun nomeDaFunção(nome:Tipo):TipoRetorno{}
- Funções anônimas, single-line, inline, extensões, Lambdas, ordem superior;

Simplificando uma função pra ter o mesmo resultado

| private fun getFullNAME(name:Sring, LastName:String):String {           - versao grande
|  val fullNAME = "$name $lastName"
|  
| private fun getFullname(name:String, lastName:String)String{            - versao menor 
|  return "$name $lastName"
|
|
| private fun getFullname(name:String, lastName:String) = $name $lastName - versao mais simplificada 

a) Funções sem retorno
fun somar (n1:Int, n2:INt){   - Dentro do parenteses eu coloco ja a minha variavel e o tipo que ela é
  println(n1+n2)
{

Fun main (){
   somar(10,5)                - aqui eu chamo minha função criada
{   

b) Funções com retorno
fun somar (n1:Int, n2:Int):Int{
  var total = n1 + n2
  return total
{
fun main(){
  var resultado = somar(10,5)
  println(resultado)
{


c) Funções ordem superior
- Recebem outra função ou lambda por parametro
- bastante uteis para a generalização de funções e tratamento de genero

d) Funções de Single-line
- Prefixo Fun nomeDaFuncao(nome:Tipo) = retorno;
- Função de uma única linha;
- Infere o tipo de retorno;

exemplo:
private fun getFullname(name:String, lastName:String) = "$name $lastName"

e) Funções /extensões
- Prefixo Fun Tipo.nomeDaFuncao();
- Cria uma fnção que só pode ser chamada por um tipo especifico, cujo o calor pode ser referenciado dentro da função através da palavra this;

exemplo:
fun String.randomCapitalizedLetter() = this[(0..this.length-1).random()].toUpperCase()

ESTRUTURAS DE CONTROLE
---------------------------------------------
- if/else, when, elvis operator;
- Pode ser utilizado tanto para controle quanto para atribuição
- Pode ser encadeado com múltiplas estruturas;

if (espressão){           | when {         | val a:Int? = null    -    o elves operator é especificamente pra vê se algum valor é nulo ou não e    
  //bloco de codigo       |   case  -> {}  | var number = a?: 0       oferecer uma alternativa pra esse valor 
}  else if (expressão2){  |   case2 -> {}  | 
  //bloco de codigo       |   case3 -> {}
}  else {                 |   else  -> {}
  //bloco de codigo
}

ATRIBUIÇÃO
--------------------------------------
- O valor atribuido tem que estar na ultima linha do bloco
- A condicional pode não usar chaves se so fizer a atribuição


